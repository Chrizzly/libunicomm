/** 
@page term_example_page Term

<p>
This is five minutes tutorial example that revials how to setup communication 
process via unicomm. Data got from the standard input are sent to opossite side.
Client side sends data to the server and server sends data to all the 
connected clients.
</p>

@section term_includes_section Includes
We are not going to use optinal features, include only the library core provided
by unicomm.hpp header.

@dontinclude term/term.hpp
@skip <unicomm/
@until <unicomm/unicomm.hpp>

@section term_messages_section Messages

Unicomm represents the data sent by sides to each other using message concept.
Here we need only one message that will hold transferred data. The definition
of the message is quite simple. We override unicomm::message_base::serialize() 
and unicomm::message_base::unserialize() to make the data to be pushed 
and popped from the channel.

@skipline struct message
@until };

@section term_session_section Session

We also would like to get the notifications about the communication process.
This is achieved via session object. The best practice is to use 
unicomm::basic_session or unicomm::extended_session as base for your class.
Please see details on this @ref sessions_section "here".

@skipline class session
@until };

Handlers write an information to the std::cout. 
<p>
Arrived message handler
gets the reference to incoming message and outputs contained data to the std::cout.
</p>

@dontinclude term/term.cpp
@skipline session::message_arrived_handler
@until }

Connected handler prints information about the socket. 

@skipline session::connected_handler
@until }

Eventually, disconnected
handler prints information about the disconnect reason.

@skipline session::disconnected_handler
@until }

@section term_decoder_section Message decoder

The message decoder is responsible for retrieving data from the channel. 
Raw data passed to it's unicomm::message_decoder_base::perform_decode() 
virtual function in first parameter. The second paramer is the reference 
to the instance of the session defined above.

@dontinclude term/term.hpp
@skipline class message_decoder
@until }
If there is a data we construct message that is passed incoming data and 
clear the buffer.
@until };

@section term_client_spesific_section Client specific

We also define client specific handler that fired if the connection could not be 
established due to some reason. You can see it just output the reason of failure
to std::cout. The handler is passed to the client on it's constructor.

@dontinclude term/term.cpp
@skipline uni_term::connect_error_handler
@until }

@section term_configuration_section Configuration

The last step is to define configuration to make unicomm working in proper manner.
The only port, decoder and session factory method are setup. Other stuff is 
left by default. Here we do not define and use specific encoder due to 
default one is enough for us here. But in real world as usual decoder and encoder 
go up together.

@skipline unicomm::config&
@until .session_factory(
Also we setup ssl specific stuff.
@until }

@section term_main_section Main

Let's take a look at the main function. It setups the endpoint to be used by 
either client or server and starts connection processing accordingly to 
parameters specified by the command line. Auxliary stuff is skipped for the sake 
of brevity. Please, look deeper into @ref term_sources_page "source code".

@dontinclude term/main.cpp
@skip } // unnamed namespace
@skipline #if defined (UNI_WIN)
@until return EXIT_SUCCESS;
@until }

<h1>Sources</h1>
@subpage term_sources_page.

*/
