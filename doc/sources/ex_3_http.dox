/**
@page http_example_page Http

<p>
Before read this example it's recommended to read 
@ref term_example_page "term" or @ref echo_example_page "echo" example first.
This example contains a lot of http specific stuff that complicate the understanding
of the approach. Conceptually this sample is the same as mentioned above.
</p>

<p>
This sample is closer to real world application. It provides 
an explanation on how to use unicomm in real world applications.
The only basics of http is implemented.
</p>

@section http_messages_section Messages
We define base class for http message inherited from unicomm::message_base.

@dontinclude http/http_message_base.hpp
@skip struct message_base
@until struct message_base
@until std::string _data;
@until };

Then define http request and response classes.

@subsection http_request_subsection Request

@dontinclude http/http_request.hpp
@skip struct request
@until struct request
@until std::string _uri;
@until };

@subsection http_response_subsection Response

@dontinclude http/http_response.hpp
@skip struct response
@until struct response
@until std::string _status_code;
@until };
  
@section http_session_params_section Session parameters

@subsection http_client_session_params_subsection Client

Client parameters holds only connected handler.

@dontinclude http/http_client_session.hpp
@skip struct client_session_params
@until struct client_session_params
@until private:
@until };

@subsection http_server_session_params_subsection Server

Server parameters contains server hosts collection, connected and disconnected
handlers.

@dontinclude http/http_server_session.hpp
@skip struct server_session_params
@until struct server_session_params
@until private:
@until };

@section http_session_section Session

Note that the session is not an http session. This is the unicomm::extended_session
descendant that representes the connection. The session in http meaning is not defined 
here, it can be easily added if necessary as upper level logic that will share 
several connections at a time. We are not going to implement another http server, 
but just want to show what can be done by using unicomm.

@subsection http_session_base_subsection Base session

We define base class for the session.

@dontinclude http/http_session_base.hpp
@skip // In this example
@until // In this example
@until };

@subsection http_client_session_subsection Client

The definition of client's session is quite simple.

@dontinclude http/http_client_session.hpp
@skip class client_session
@until class client_session
@until };

@dontinclude http/http_client_session.cpp
@skip message_timeout_handler_1
@until message_timeout_handler_1
@until message_arrived_handler
@until }

@subsection http_server_session_subsection Server

The server's session provides http server side logic implementation.

@dontinclude http/http_server_session.hpp
@skip class server_session
@until class server_session
@until };
@until };

Below is the implementation of the server's session. Http specific stuff is 
ommited for sake of brevity.

@dontinclude http/http_server_session.cpp
@skip message_sent_handler_1
@until message_sent_handler_1
@until return check_resource_result(cit, target_path, is_dir);
@until }

@section http_config_section Configuration
 
The last step is to define configuration to make unicomm working 
in proper manner.
 
@dontinclude http/http_config.cpp
@skip namespace 
@until namespace 
@until return conf;
@until return conf;
@until return conf;
@until }

@section http_decoder_section Decoder

unicomm::message_decoder_base::perform_decode() provides "template method" 
implementation. If required logic fits to this template you should 
override serveral virtual function as shown below. Instead override entire
unicomm::message_decoder_base::perform_decode() and implement 
the logic you need.

@dontinclude http/http_message_decoder.hpp
@skip class message_decoder
@until class message_decoder 
@until };

@dontinclude http/http_message_decoder.cpp
@skip unicomm::message_decoder_base::iter_pair_type 
@until unicomm::message_decoder_base::iter_pair_type
@until uni_http::message_decoder::finish_decode
@until }

@section http_encoder_section Encoder

The encoder in opposite to decoder is quite simple.

@dontinclude http/http_message_encoder.hpp
@skip class message_encoder
@until class message_encoder 
@until };

@dontinclude http/http_message_encoder.cpp
@skip unicomm::out_buffer_type&
@until unicomm::out_buffer_type&
@until }

@section http_main_section Main
 
Let's use the above defined stuff. 

@dontinclude http/main.cpp
@skip #include "main_stuff.inl"
@skipline #if defined (UNI_WIN)
@until return EXIT_SUCCESS;
@until }

<h1>Sources</h1>
@subpage http_sources_page.

*/