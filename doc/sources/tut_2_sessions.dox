/** 
@page tutorial_page Tutorial
@section sessions_section Sessions

The meaning of the unicomm session is traditional. The session can be only 
considered as valid while the connection is established, 
when the connection breaks the session becomes invalid and must not be used.
Note that if you create a reference or pointer to the session object, after
disconnect occurs the access to the session through those will lead to 
the memory access violation i.e. to std::terminate() eventually.
The session lifetime is determined by connected and disconnected handlers. 

In common way to invoke upper (business) logic it's necessary to 
inherit from either unicomm::session_base, unicomm::basic_session or 
unicomm::extended_session and override necessary functions or assign handlers
(In case of unicomm::extended_session).

There is no matter what side (server/client) the connection occurs on. 
Everything is described relates to both server and client 
classes. When connection occurs, either accepted by server or 
initiated by client connect is succeeded,
at first, session constructor is called. It also as unicomm::session_base::connected_handler 
accepts unicomm::connected_params. Any exception from user's session object 
constructor will brake the connection immediately and destroy the parent communication 
object which tries to create user's session object.
After constructor completed unicomm::session_base::connected_handler is called.
 
When disconnect occurs the unicomm::session_base::disconnected_handler is invoked. 
After it completes session object is destroyed, so destructor is called immediately
after the disconnected handler. Most of handlers allow exception to be 
thrown within the handler. For more details see @ref events_subsection "session events".
 
@see unicomm::session_base, unicomm::basic_session, unicomm::extended_session
  (@ref which_session_to_use_section "Which one to use"?).

@subsection events_subsection Session events

There are several events defined. Each event handler accepts parameters. 
Handler parameters structure depends on handler type the parameters regards to.
Every parameters structure except unicomm::connect_error_params and 
unicomm::after_all_processed_params has reference to the instance of 
unicomm::communicator that is responsible for the communication of 
this session. The communication object is used to manipulate the 
connection and get the information such as local and remote endpoints. It allows 
to send messages and perform disconnect.

@note Almost all the handlers allow to throw any exceptions. But note that debug will assert
if the thrown exception is not <strong>std::exception</strong> derived, release does nothing. 
<strong>If any specific restrictions exist for certain handler, it is explicitly specified.</strong>
Throwing an exception from the handler where it allowed interrupts 
unicomm::communicator::process() at the current iteration and moves to next 
unicomm::communicator to be processed. Throwing unicomm::disconnected_error leads
to connection braking.

<ul style="list-style-type:none;">
<li>@ref unicomm::session_base::connected_handler "Connected event".
The event occurs only if connect is succeeded or incoming connection accepted successfully.
It also regards to ssl handshakes. Handshake is transparent for user's code. 
Session is only created if every operation during the connect is successfully 
completed.

<li>@ref unicomm::session_base::disconnected_handler "Disconnected event" <strong>NO THROW</strong>.
The event occurs on disconnect. It means when handler is invoked the communication
is already stopped and tcp socket is closed. Parameters have the reason of the
connection closure. The session's destructor is called immediately after this 
handler completes.

<li>@ref unicomm::session_base::message_arrived_handler "Message arrived event".
Occurs when message is received by transport layer and successfully parsed.

<li>@ref unicomm::session_base::message_sent_handler "Message sent event".
The event happens when the message is actually sent. The event's parameters
contain the identifier of the message has been sent.
@see unicomm::dispatcher::send_one(), unicomm::dispatcher::send_all(), 
unicomm::send_one(), unicomm::send_all().

<li>@ref unicomm::session_base::message_timeout_handler "Message timeout event".
The event occurs if the reply for the sent message is not got within timeout 
specified by the configuration for this message type. If the timeouted message 
comes after the timeout period elapsed it is thrown out and it is not reported 
i.e. message arrived handler is not called.

<li>@ref unicomm::session_base::error_handler "Error event" <strong>NO THROW</strong>.
Error handler invoked when any exception is risen while processing. For instance, 
if any user handler (except error handler, disconnect handler) rises an exception the error handler
will be invoked. If description is available it will be accessible through second parameter.
Must be <strong>no throw</strong>. Debug asserts on throw, release does nothing.

<li>@ref unicomm::session_base::after_processed_handler "After processed event".
Occurs when current communication process (unicomm::communicator::process()) iteration
finishes successfully.
</ul>

Following events have no reference to unicomm::communicator.

<ul style="list-style-type:none;">
<li>@ref unicomm::connect_error_signal_type "Connect error event" <strong>NO THROW</strong>.
If an error occurs while initiating connection on client side 
connect error handler is called.

@see unicomm::client::add_connect_error_handler().

<li>@ref unicomm::after_all_processed_handler_type "After all processed event".
The event occurs each time when the process iteration is about to finish.
The handler is called after all the communication objects are processed.
So, if there are no connections this handler is called within the 
unicomm::config::dispatcher_idle_tout() period.

@see unicomm::dispatcher::set_after_all_processed_handler(),
unicomm::dispatcher::clear_after_all_processed_handler.

</ul>
*/
